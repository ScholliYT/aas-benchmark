var searchIndex = JSON.parse('{\
"aas_benchmark":{"doc":"","i":[[5,"main","aas_benchmark","",null,[[],[["box",3],["result",4]]]],[0,"algorithms","","",null,null],[0,"dfa","aas_benchmark::algorithms","",null,null],[5,"dfa_with_delta","aas_benchmark::algorithms::dfa","Simulates a deterministic finite automaton (DFA) using a…",null,[[],["option",4]]],[5,"dfa_with_lps_delta","","Simulates a deterministic finite automation (DFA) using a…",null,[[["vec",3]],["option",4]]],[6,"DeltaFunction","","",null,null],[6,"LpsDeltaFunction","","",null,null],[0,"full_text_indices","aas_benchmark::algorithms","",null,null],[0,"suffix_array","aas_benchmark::algorithms::full_text_indices","",null,null],[5,"slow","aas_benchmark::algorithms::full_text_indices::suffix_array","Calculates the suffix array for a given text in `O(n^2 log…",null,[[],["vec",3]]],[5,"lcp_slow","","Calculates the longest common prefix (lcp) array in…",null,[[["vec",3]],["vec",3]]],[5,"lcp_slow_single","","Calculates the longest common prefix (lcp) of the suffixes…",null,[[["vec",3]]]],[0,"single_pattern","aas_benchmark::algorithms","",null,null],[0,"all","aas_benchmark::algorithms::single_pattern","",null,null],[5,"all","aas_benchmark::algorithms::single_pattern::all","",null,[[],["vec",3]]],[0,"bndm","aas_benchmark::algorithms::single_pattern","",null,null],[5,"bndm","aas_benchmark::algorithms::single_pattern::bndm","An implementation of the Backward Nondeterministic DAWG…",null,[[],["vec",3]]],[5,"bndm_with_masks","","An implementation of the Backward Nondeterminstic DAWG…",null,[[["hashmap",3]],["vec",3]]],[0,"horspool","aas_benchmark::algorithms::single_pattern","",null,null],[5,"horspool_shift","aas_benchmark::algorithms::single_pattern::horspool","",null,[[],["hashmap",3]]],[5,"horspool","","",null,[[],["option",4]]],[5,"horspool_all","","",null,[[],["vec",3]]],[0,"kmp","aas_benchmark::algorithms::single_pattern","",null,null],[5,"kmp_compute_lps","aas_benchmark::algorithms::single_pattern::kmp","Computes the lps function used by the KMP algorithm.",null,[[],["vec",3]]],[5,"dfa_delta_lps","","Simulates a DFA delta function using a given lps function.",null,[[["vec",3]]]],[5,"kmp","","An implementation of the Knuth-Morris-Pratt algorithm (KMP).",null,[[],["option",4]]],[5,"kmp_all","","Calculates all occurrences of a given pattern in a text by…",null,[[],["vec",3]]],[5,"kmp_classic","","The classic implementation of the Knuth-Morris-Pratt…",null,[[],["option",4]]],[5,"kmp_classic_all","","",null,[[],["vec",3]]],[0,"naive","aas_benchmark::algorithms::single_pattern","",null,null],[5,"naive","aas_benchmark::algorithms::single_pattern::naive","The naive algorithm approach uses a simple loop to look…",null,[[],["option",4]]],[5,"naive_all","","",null,[[],["vec",3]]],[0,"shift_and","aas_benchmark::algorithms::single_pattern","",null,null],[5,"shift_and_single_masks","aas_benchmark::algorithms::single_pattern::shift_and","",null,[[]]],[5,"shift_and_with_masks","","",null,[[["hashmap",3]],["vec",3]]],[5,"shift_and","","",null,[[],["vec",3]]],[0,"cli","aas_benchmark","",null,null],[3,"CLIParams","aas_benchmark::cli","",null,null],[12,"algorithms","","",0,null],[12,"human_readble","","",0,null],[12,"executions","","",0,null],[12,"seed","","",0,null],[12,"pattern_source","","",0,null],[12,"text_source","","",0,null],[5,"only_one","","",null,[[["vec",3]]]],[5,"none","","",null,[[["vec",3]]]],[5,"only","","",null,[[["vec",3]],["option",4]]],[11,"new","","Reads CLI arguments, parses them using Clap and returns a…",0,[[]]],[11,"valid","","Validates CLI arguments stored in this `CLIParams` object.",0,[[]]],[11,"set_pattern_source","","",0,[[["argmatches",3]],["patternsource",4]]],[11,"set_text_source","","",0,[[["argmatches",3]],["textsource",4]]],[0,"generate","aas_benchmark","",null,null],[5,"gen_rand_bytes","aas_benchmark::generate","Generates a byte vector containing random bytes.",null,[[["option",4]],["vec",3]]],[5,"rand_pattern_from_bytes","","",null,[[["option",4]]]],[0,"match_algorithm","aas_benchmark","",null,null],[3,"ALGORITHMS","aas_benchmark::match_algorithm","List of existing algorithms and their internal names",null,null],[12,"__private_field","","",1,null],[5,"match_algorithm","","Returns the algorithm function matching the given name.",null,[[],["option",4]]],[5,"match_algorithms","","Returns the algorithm functions and names matching the…",null,[[["vec",3]],["vec",3]]],[5,"algorithm_name","","Returns the pretty formatted name of an algorithm matching…",null,[[]]],[6,"Algorithm","","The signature of a pattern matching algorithm",null,null],[0,"measure","aas_benchmark","",null,null],[5,"measure","aas_benchmark::measure","A function to measure the runtime of an algorithm.",null,[[]]],[5,"measure_multiple","","A function to measure the runtimes of multiple executions…",null,[[]]],[5,"measure_multiple_different_patterns","","Measures the runtimes of multiple executions of an…",null,[[["vec",3]],[["vec",3],["measureresult",3]]]],[5,"calculate_avg_duration","","A function to calculate the average duration of a…",null,[[["vec",3]]]],[0,"csv_record","","",null,null],[3,"CSVRecord","aas_benchmark::measure::csv_record","",null,null],[12,"algorithm_name","","",2,null],[12,"text_length","","",2,null],[12,"pattern_length","","",2,null],[12,"execution","","",2,null],[12,"matches","","",2,null],[12,"time_ms","","",2,null],[11,"new","","",2,[[]]],[0,"measure_result","aas_benchmark::measure","",null,null],[3,"MeasureResult","aas_benchmark::measure::measure_result","A struct containg the measurement results of one or…",null,null],[12,"algorithm_name","","",3,null],[12,"text_length","","",3,null],[12,"pattern_length","","",3,null],[12,"matches","","",3,null],[12,"durations","","",3,null],[12,"avg_duration","","",3,null],[11,"new","","Initalizes a new `MeasureResult` and calculates the…",3,[[["vec",3],["duration",3]]]],[11,"print","","Prints a summary of the `MeasureResult` containing…",3,[[]]],[11,"print_csv","","",3,[[],[["box",3],["result",4]]]],[0,"pattern","aas_benchmark","",null,null],[4,"PatternSource","aas_benchmark::pattern","",null,null],[13,"FromArgument","","",4,null],[13,"FromFile","","",4,null],[13,"FromText","","",4,null],[13,"FromTextRandom","","",4,null],[13,"Random","","",4,null],[13,"Error","","",4,null],[5,"generate_patterns","","Decides how a pattern should be generated based on the…",null,[[["option",4],["cliparams",3]],[["result",4],["vec",3],["string",3]]]],[5,"load_pattern_from_file","","Loads pattern from a file",null,[[],[["vec",3],["result",6]]]],[0,"range","aas_benchmark","",null,null],[3,"Range","aas_benchmark::range","A struct to represent a range starting and ending at…",null,null],[12,"start","","",5,null],[12,"end","","",5,null],[12,"step_size","","",5,null],[3,"ParseRangeError","","",null,null],[3,"RangeIterator","","",null,null],[12,"curr","","",6,null],[12,"next","","",6,null],[12,"step_size","","",6,null],[12,"end","","",6,null],[11,"new","","",5,[[]]],[11,"is_empty","","",5,[[]]],[11,"single","","Returns `start` if it is the only value in the `Range`.",5,[[],["option",4]]],[11,"iter","","",5,[[],["rangeiterator",3]]],[11,"is_valid","","",5,[[]]],[11,"from_range","","",6,[[["range",3]]]],[0,"text","aas_benchmark","",null,null],[4,"TextSource","aas_benchmark::text","",null,null],[13,"RandomText","","",7,null],[13,"FromFile","","",7,null],[13,"FromFileBinary","","",7,null],[13,"Error","","",7,null],[5,"generate_text","","Decides how a text should be generated based on the given…",null,[[["option",4],["cliparams",3]],[["result",4],["vec",3],["string",3]]]],[5,"load_text_from_file","","Loads text from a file",null,[[],[["vec",3],["result",6]]]],[5,"load_text_from_file_binary","","",null,[[],["vec",3]]],[11,"from","aas_benchmark::cli","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","aas_benchmark::match_algorithm","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","aas_benchmark::measure::csv_record","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","aas_benchmark::measure::measure_result","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","aas_benchmark::pattern","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","aas_benchmark::range","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","aas_benchmark::text","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"next","aas_benchmark::range","",6,[[],["option",4]]],[11,"clone","","",8,[[],["parserangeerror",3]]],[11,"eq","aas_benchmark::pattern","",4,[[["patternsource",4]]]],[11,"ne","","",4,[[["patternsource",4]]]],[11,"eq","aas_benchmark::range","",5,[[]]],[11,"eq","aas_benchmark::text","",7,[[["textsource",4]]]],[11,"ne","","",7,[[["textsource",4]]]],[11,"deref","aas_benchmark::match_algorithm","",1,[[],["hashmap",3]]],[11,"fmt","aas_benchmark::pattern","",4,[[["formatter",3]],["result",6]]],[11,"fmt","aas_benchmark::range","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","aas_benchmark::text","",7,[[["formatter",3]],["result",6]]],[11,"fmt","aas_benchmark::range","",8,[[["formatter",3]],["result",6]]],[11,"from_str","","",5,[[],["result",4]]],[11,"initialize","aas_benchmark::match_algorithm","",1,[[]]],[11,"serialize","aas_benchmark::measure::csv_record","",2,[[],["result",4]]]],"p":[[3,"CLIParams"],[3,"ALGORITHMS"],[3,"CSVRecord"],[3,"MeasureResult"],[4,"PatternSource"],[3,"Range"],[3,"RangeIterator"],[4,"TextSource"],[3,"ParseRangeError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);